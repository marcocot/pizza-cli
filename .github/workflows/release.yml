name: Release Pipeline

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: release-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-lint:
    name: Test & Lint (Clippy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy,rustfmt

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Tests
        run: cargo test --workspace --all-features --all

  release-please:
    name: Release Please (Conventional Commits)
    runs-on: ubuntu-latest
    needs: test-and-lint
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .release-please-config.json
          manifest-file: .github/release-please-manifest.json

  build-and-upload:
    name: Build & Upload Binaries
    needs: release-please
    if: needs.release-please.outputs.release_created == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
            archive: tar.gz
          # macOS Intel
          - os: macos-13
            target: x86_64-apple-darwin
            ext: ""
            archive: tar.gz
          # macOS Apple Silicon
          - os: macos-14
            target: aarch64-apple-darwin
            ext: ""
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
            archive: zip
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Build (pizza-cli)
        working-directory: pizza-cli
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          BIN_NAME="pizza-cli${{ matrix.ext }}"
          TAG="${{ needs.release-please.outputs.tag_name }}"
          OUT_DIR="dist"
          mkdir -p "$OUT_DIR"

          BIN_PATH="target/${{ matrix.target }}/release/${BIN_NAME}"

          # Compose archive name
          ARCHIVE="pizza-cli-${TAG}-${{ matrix.target }}.${{ matrix.archive }}"

          if [ "${{ matrix.archive }}" = "zip" ]; then
            7z a "$OUT_DIR/$ARCHIVE" "$BIN_PATH"
          else
            tar -C "target/${{ matrix.target }}/release" -czf "$OUT_DIR/$ARCHIVE" "$BIN_NAME"
          fi

          echo "ARCHIVE_PATH=$OUT_DIR/$ARCHIVE" >> $GITHUB_ENV

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: ${{ env.ARCHIVE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  homebrew-tap:
    name: Update Homebrew Tap
    runs-on: ubuntu-latest
    needs: build-and-upload
    steps:
      - name: Checkout tap repo
        uses: actions/checkout@v5
        with:
          repository: marcocot/homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: tap
          fetch-depth: 0

      - name: Checkout main repo
        uses: actions/checkout@v5
        with:
          path: mainrepo
          fetch-depth: 0

      - name: Prepare formula
        shell: bash
        run: |
          set -euo pipefail
          FORMULA_PATH="tap/Formula/pizza-cli.rb"
          cp mainrepo/.github/Formula/pizza-cli.rb.in "$FORMULA_PATH"

          sed -i "s|TAG|${TAG}|g" "$FORMULA_PATH"
          CLEAN_VER="${TAG#v}"
          sed -i "s|version \"0.0.0\"|version \"${CLEAN_VER}\"|g" "$FORMULA_PATH"
          sed -i "s|X64_SHA|${X64_SHA}|g" "$FORMULA_PATH"
          sed -i "s|ARM_SHA|${ARM_SHA}|g" "$FORMULA_PATH"

      - name: Commit & push tap
        working-directory: tap
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/pizza-cli.rb
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "pizza-cli: bump to ${TAG}"
            git push
          fi
